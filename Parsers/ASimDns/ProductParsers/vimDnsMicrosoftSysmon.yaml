Parser:
  Title: ASIM Sysmon DNS Parametrized Parser
  Version: '0.1'
  LastUpdated: Sep 13, 2021
Product:
  Name: Microsoft Windows Events Sysmon
Normalization:
  Schema: Dns
  Version: '0.1.2'
References:
- Title: ASIM DNS Schema
  Link: https://aka.ms/AzSentinelDnsDoc
- Title: ASIM
  Link: https:/aka.ms/AzSentinelNormalization
  Description: ASIM Sysmon DNS Parametrized Parser (event number 22)  from "Event" and "WindowsEvent" tables.
ParserName: vimDnsMicrosoftSysmon
ParserParams:
  - Name: starttime
    Type: datetime
    Default: datetime(null)
  - Name: endtime
    Type: datetime
    Default: datetime(null)
  - Name: srcipaddr
    Type: string
    Default: '*'
  - Name: domain_has_any
    Type: dynamic
    Default: dynamic([])
  - Name: responsecodename
    Type: string
    Default: '*'
  - Name: response_has_ipv4
    Type: string
    Default: '*'
  - Name: response_has_any_prefix
    Type: dynamic
    Default: dynamic([])
  - Name: eventtype
    Type: string
    Default: 'lookup'
ParserQuery: | 
  let RCodeTable=datatable(DnsResponseCode:int,DnsResponseCodeName:string)[
    // See https://docs.microsoft.com/windows/win32/debug/system-error-codes--9000-11999-
     0, 'NOERROR'
   , 9001, "FORMERR"
   , 9002,"SERVFAIL"
   , 9003,'NXDOMAIN'
   , 9004,'NOTIMP'
   , 9005,'REFUSED'
   , 9006,'YXDOMAIN'
   , 9007,'YXRRSET'
   , 9008,'NXRRSET'
   , 9009,'NOTAUTH'
   , 9010,'NOTZONE'
   , 9011,'DSOTYPENI'
   , 9016,'BADVERS'
   , 9016,'BADSIG'
   , 9017,'BADKEY'
   , 9018,'BADTIME'
   , 9019,'BADMODE'
   , 9020,'BADNAME'
   , 9021,'BADALG'
   , 9022,'BADTRUNC'
   , 9023,'BADCOOKIE'
   , 1460, 'TIMEOUT'
  ];
  let ParsedDnsEvent_Event =(
    starttime:datetime=datetime(null), endtime:datetime=datetime(null)
    , srcipaddr:string='*'
    , domain_has_any:dynamic=dynamic([]) 
    , responsecodename:string='*', response_has_ipv4:string='*'
    , response_has_any_prefix:dynamic=dynamic([]) , eventtype:string='lookup'
  ) 
  {
    Event 
      | where Source == "Microsoft-Windows-Sysmon" and EventID==22
      // -- Pre-parsing filtering (srcipaddr not available, responsecodename not optimizable)
      | where
        (eventtype=='lookup')
        and (srcipaddr=='*')
        and (isnull(starttime) or TimeGenerated >= starttime)
        and (isnull(endtime) or TimeGenerated <= endtime)
        and (array_length(domain_has_any) ==0 or EventData has_any (domain_has_any))
        and (response_has_ipv4=='*' or has_ipv4(EventData,response_has_ipv4) )
        and (array_length(response_has_any_prefix) == 0 or has_any_ipv4_prefix(EventData, response_has_any_prefix))
      // --
      | parse EventData with 
        * 
        '<Data Name="RuleName">' RuleName:string '</Data>' 
        '<Data Name="UtcTime">' EventEndTime:datetime '</Data>'
        '<Data Name="ProcessGuid">{' ProcessGuid:string '}</Data>'
        '<Data Name="ProcessId">' ProcessId:string '</Data>'
        '<Data Name="QueryName">' DnsQuery:string '</Data>'
        '<Data Name="QueryStatus">' DnsResponseCode:int  '</Data>'
        '<Data Name="QueryResults">' DnsResponseName:string '</Data>'
        '<Data Name="Image">' Process:string '</Data>'
        *
      | project-away EventData, ParameterXml, RenderedDescription 
      // -- Post-filtering tests differnt for Event and WindowsEvent
      | lookup RCodeTable on DnsResponseCode
      | where  (responsecodename=="*" or DnsResponseCodeName has responsecodename) // -- filter is not optimized
      // --
      | project-rename SrcUsername = UserName
      | extend Username = SrcUsername
    };
  let ParsedDnsEvent_WindowsEvent =(
    starttime:datetime=datetime(null), endtime:datetime=datetime(null)
    , srcipaddr:string='*'
    , domain_has_any:dynamic=dynamic([]) 
    , responsecodename:string='*', response_has_ipv4:string='*'
    , response_has_any_prefix:dynamic=dynamic([]) , eventtype:string='lookup'
  ) 
  {
    WindowsEvent
    | where Provider == "Microsoft-Windows-Sysmon" and EventID == 22
      // -- Pre-parsing filtering (srcipaddr not available)
    | where
      (eventtype=='lookup')
      and (srcipaddr=='*')
      and (isnull(starttime) or TimeGenerated >= starttime)
      and (isnull(endtime) or TimeGenerated <= endtime)
      and (array_length(domain_has_any) ==0 or EventData has_any (domain_has_any))
      and (response_has_ipv4=='*' or has_ipv4(EventData,response_has_ipv4) )
      and (array_length(response_has_any_prefix) == 0 or has_any_ipv4_prefix(EventData, response_has_any_prefix))
    | extend DnsResponseCode = toint(EventData.QueryStatus)
    | lookup RCodeTable on DnsResponseCode
    | where  (responsecodename=="*" or DnsResponseCodeName has responsecodename) // -- filter is not optimized
    // --
    | extend 
       RuleName = tostring(EventData.RuleName),
       EventEndTime = todatetime(EventData.UtcTime),
       ProcessGuid = extract ('{(.*)}', 1, tostring(EventData.ProcessGuid), typeof(string)),
       ProcessId = tostring(EventData.ProcessId),  
       DnsQuery = tostring(EventData.QueryName),
       DnsResponseName = tostring(EventData.QueryResults),
       Process = tostring(EventData.Image)
    | project-away EventData
    | lookup RCodeTable on DnsResponseCode
    | where  (responsecodename=="*" or DnsResponseCodeName has responsecodename) // -- filter is not optimized
  };
  let ParsedDnsEvent=(
    starttime:datetime=datetime(null), endtime:datetime=datetime(null)
    , srcipaddr:string='*'
    , domain_has_any:dynamic=dynamic([]) 
    , responsecodename:string='*', response_has_ipv4:string='*'
    , response_has_any_prefix:dynamic=dynamic([]) , eventtype:string='lookup'
  ) 
  {
    union isfuzzy=true 
      ParsedDnsEvent_Event(starttime, endtime, srcipaddr, domain_has_any, responsecodename, response_has_ipv4, response_has_any_prefix, eventtype)
    , ParsedDnsEvent_WindowsEvent (starttime, endtime, srcipaddr, domain_has_any, responsecodename, response_has_ipv4, response_has_any_prefix, eventtype)
  // -- Post-filtering accurately now that message is parsed
  | where
    (array_length(domain_has_any) == 0 or DnsQuery has_any (domain_has_any))
     and (response_has_ipv4=='*' or has_ipv4(DnsResponseName,response_has_ipv4) )
     and (array_length(response_has_any_prefix) == 0 or has_any_ipv4_prefix(DnsResponseName, response_has_any_prefix))
  // --
  | project-rename 
      DvcHostname = Computer
  | extend
      EventOriginalUid = '22',
      EventCount=int(1),
      EventProduct = 'Sysmon',
      EventVendor = 'Microsoft',
      EventSchema = 'Dns',
      EventSchemaVersion="0.1.2",
      EventType = 'lookup',
      EventResult = iff (DnsResponseCode == 0,'Success','Failure'),
      EventStartTime = EventEndTime,
      EventSubType= 'response',
      EventSeverity= iif (DnsResponseCode == 0, 'Informational', 'Low'),
      SrcUsernameType = 'Windows'
  // -- Aliases
  | extend 
       EventResultDetails = DnsResponseCodeName,
       Domain = DnsQuery,
       Dvc = DvcHostname,
       SrcHostname = DvcHostname,
       DnsResponseCode = toint(iff (DnsResponseCode > 9000 and DnsResponseCode < 9100, DnsResponseCode-9000, DnsResponseCode))
  // -- Backward Computability
  | extend
       Query=DnsQuery,
       ResponseCodeName=DnsResponseCodeName 
  };
  ParsedDnsEvent (starttime, endtime, srcipaddr, domain_has_any, responsecodename, response_has_ipv4, response_has_any_prefix, eventtype)