Parser:
  Title: Microsoft DNS
  Version: '0.1'
  LastUpdated: May 10, 2021
Product:
  Name: MS DNS Events
Normalization:
  Schema: Dns
  Version: '0.1.1'
References:
- Title: ASIM DNS Schema
  Link: https://aka.ms/AzSentinelDnsDoc
- Title: ASIM
  Link: https://aka.ms/AzSentinelNormalization
Description: |
  This is a Query Parser that is used to map MS DNS (DnsEvents) to the Azure Sentinel Information Model DNS schema.  
ParserName: vimDnsMicrosoftOMS
ParserParams:
  - Name: starttime
    Type: datetime
    Default: datetime(null)
  - Name: endtime
    Type: datetime
    Default: datetime(null)
  - Name: srcipaddr
    Type: string
    Default: '*'
  - Name: domain_has_any
    Type: dynamic
    Default: dynamic([])
  - Name: responsecodename
    Type: string
    Default: '*'
  - Name: response_has_ipv4
    Type: string
    Default: '*'
  - Name: response_has_any_prefix
    Type: dynamic
    Default: dynamic([])
  - Name: eventtype
    Type: string
    Default: 'lookup'
ParserQuery: |
  let RCodeTable=datatable(ResponseCode:int,ResponseCodeName:string)[
     0, 'NOERROR'
   , 1, "FORMERR"
   , 2,"SERVFAIL"
   , 3,'NXDOMAIN'
   , 4,'NOTIMP'
   , 5,'REFUSED'
   , 6,'YXDOMAIN'
   , 7,'YXRRSET'
   , 8,'NXRRSET'
   , 9,'NOTAUTH'
   , 10,'NOTZONE'
   , 11,'DSOTYPENI'
   , 16,'BADVERS'
   , 16,'BADSIG'
   , 17,'BADKEY'
   , 18,'BADTIME'
   , 19,'BADMODE'
   , 20,'BADNAME'
   , 21,'BADALG'
   , 22,'BADTRUNC'
   , 23,'BADCOOKIE'];
  let DNSQuery_MS=(
    starttime:datetime=datetime(null), endtime:datetime=datetime(null)
    , srcipaddr:string='*'
    , domain_has_any:dynamic=dynamic([]) 
    , responsecodename:string='*', response_has_ipv4:string='*'
    , response_has_any_prefix:dynamic=dynamic([]) , eventtype:string='lookup'
    ){
    let rcodenames=toscalar(RCodeTable | where ResponseCodeName == responsecodename | project ResponseCode);
    DnsEvents 
    // ******************************************************************
      //  Pre-parsing filterring:
        | where
          (isnull(starttime) or TimeGenerated >= starttime)
          and (isnull(endtime) or TimeGenerated <= endtime) 
          and (srcipaddr=='*' or ClientIP==srcipaddr)
          and (array_length(domain_has_any) ==0 or Name has_any (domain_has_any))
          and (responsecodename=='*' or ResultCode == rcodenames)
          and (response_has_ipv4=='*' or has_ipv4(IPAddresses,response_has_ipv4) )
          and (array_length(response_has_any_prefix) ==0 or has_any_ipv4_prefix(IPAddresses, response_has_any_prefix)  )
    // *****************************************************************
    |  where EventId in (257,258)
    | project-rename
         Dvc=Computer ,
         SrcIpAddr = ClientIP,
         DnsQueryTypeName=QueryType,
         EventMessage = Message,
         EventReportUrl = ReportReferenceLink,
         DnsResponseName = IPAddresses,
         DnsQuery = Name,
         ResponseCode = ResultCode
  | extend
  // ******************* Mandatory
         EventCount=int(1),
         EventStartTime=TimeGenerated,
         EventVendor = "Microsoft",
         EventProduct = "Microsoft DNS Server",
         EventSchemaVersion="0.1.1",
         //
         EventEndTime=TimeGenerated,
         EventSubType='response',
         EventSeverity = tostring(Severity),
         EventType = 'lookup',
         DvcHostname = Dvc,
         EventResult = iff(EventId==257 and ResponseCode==0 ,'Success','Failure')
     | lookup RCodeTable on ResponseCode
     | extend EventResultDetails = case (isnotempty(ResponseCodeName), ResponseCodeName
                                    , ResponseCode between (3841 .. 4095), 'Reserved for Private Use'
                                    , 'Unassigned')
    // **************Aliases
    | extend
        ResponseCodeName=EventResultDetails,
        Domain=DnsQuery,
        IpAddr=SrcIpAddr,
    // Backward Competability
      Query=DnsQuery
      , QueryTypeName=DnsQueryTypeName
      , ResponseName=DnsResponseName
    // OSSEM 
      , DnsResponseCode=ResponseCode
      , DnsResponseCodeName=ResponseCodeName
        };
  DNSQuery_MS(starttime, endtime, srcipaddr, domain_has_any, responsecodename, response_has_ipv4, response_has_any_prefix, eventtype)
